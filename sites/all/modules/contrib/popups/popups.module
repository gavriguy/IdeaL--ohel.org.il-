<?php

/**
 * @file
 * This module provides a hook_popups for links to be openned in an Ajax Popup Modal Dialog.
 */


// **************************************************************************
// CORE HOOK FUNCTIONS   ****************************************************
// **************************************************************************

/**
 * Implementation of hook_menu().
 *
 * @return array of new menu items.
 */
function popups_menu() {

  // Admin Settings.
  $items['admin/settings/popups'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('popups_admin_settings'),
    'title' => 'Popups',
    'access arguments' => array('administer site configuration'),
    'description' => 'Configure the page-in-a-dialog behavior.',
  );

  return $items;
}

/**
 * Implementation of hook_init().
 *
 * Look at the page path and see if popup behavior has been requested for any links in this page.
 */
function popups_init() {
  $popups = popups_get_popups();

  if (variable_get('popups_always_scan', 0)) {
    popups_add_popups();
  }

  foreach ($popups as $path => $popup_config) {
    if ($path == $_GET['q']) {
      popups_add_popups($popup_config);
    }
    elseif (strpos($path, '*') !== FALSE && drupal_match_path($_GET['q'], $path)) {
      popups_add_popups($popup_config);
    }
  }

  $render_mode = '';
  if (isset($_SERVER['HTTP_X_DRUPAL_RENDER_MODE'])) {
    $render_mode = $_SERVER['HTTP_X_DRUPAL_RENDER_MODE'];
  }

  // Check and see if the page_override param is in the URL.
  // Note - the magic happens here.
  // Need to cache the page_override flag in the session, so it will effect
  // the results page that follows a form submission.
  if ($render_mode == 'json/popups') {
    $_SESSION['page_override'] = TRUE;
  }

  // Move the page_override flag back out of the session.
  if (isset($_SESSION['page_override'])) {
    // This call will not return on form submission.
    $content = menu_execute_active_handler();

    // The call did return, so it wasn't a form request,
    // so we are returning a result, so clear the session flag.
    $override = $_SESSION['page_override'];
    unset($_SESSION['page_override']);

    // Menu status constants are integers; page content is a string.
    if (isset($content) && !is_int($content) && isset($override)) {
      print popups_render_as_json($content);
      exit;  // Do not continue processing request in index.html.
    }
  }

}

/**
 * Implementation of hook_form_alter().
 *
 * Look at the form_id and see if popup behavior has been requested for any links in this form.
 *
 * @param form_array $form
 * @param array $form_state
 * @param str $form_id:
 */
function popups_form_alter(&$form, $form_state, $form_id) {
  // Add popup behavior to the form if requested.
  $popups = popups_get_popups();
  if (isset($popups[$form_id])) {
    popups_add_popups($popups[$form_id]);
  }

  // Alter the theme configuration pages, to add a per-theme-content selector.
  $theme = arg(4);
  if ($form_id == 'system_theme_settings' && $theme) {
    $form['popups'] = array(
      '#type' => 'fieldset',
      '#title' => t('Popup Settings'),
      '#weight' => -2,
    );
    $form['popups']['popups_content_selector'] = array(
      '#type' => 'textfield',
      '#title' => t('Content Selector'),
      '#default_value' => variable_get('popups_'. $theme .'_content_selector', _popups_default_content_selector()),
      '#description' => t("jQuery selector to define the page's content area on this theme."),
    );
    $form['popups']['popups_theme'] = array(
      '#type' => 'hidden',
      '#value' => $theme,
    );
    $form['#submit'][] = 'popups_theme_settings_form_submit';
  }
}

// **************************************************************************
// UTILITY FUNCTIONS   ******************************************************
// **************************************************************************

/**
 * Render the page contents in a custom json wrapper.
 *
 * @param $content: themed html.
 * @return $content in a json wrapper with metadata.
 */
function popups_render_as_json($content) {
  // Call theme_page so modules like jquery_update can do their thing. We don't
  // really care about the mark up but we want to pull the messages out first.
	$messages = theme('status_messages');
  $ignore = theme('page', $content);

  $path = $_GET['q']; // Get current path from params.
  return drupal_json(array(
    'title' => drupal_get_title(),
    'messages' => $messages,
    'path' => $path,
    'content' => $content,
    'js' => popups_get_js(),
    'css' => popups_get_css(),
  ));
}

/**
 * Get the added JS in a format that is readable by popups.js.
 */
function popups_get_js() {
  $js = array_merge_recursive(drupal_add_js(), drupal_add_js(NULL, NULL, 'footer'));
  $query_string = '?'. substr(variable_get('css_js_query_string', '0'), 0, 1);

  $popup_js = array();

  foreach ($js as $type => $data) {
    if (!$data) continue;
    switch ($type) {
      case 'setting':
        // Why not just array_merge_recursive($data);
        $popup_js['setting'] = call_user_func_array('array_merge_recursive', $data);
        break;
      case 'inline':
        foreach ($data as $info) {
          $popup_js['inline'][] = '<script type="text/javascript"' . ($info['defer'] ? ' defer="defer"' : '') . '>' . $info['code'] . "</script>\n";
        }
        break;
      default:
        foreach ($data as $path => $info) {
          $popup_js[$type][$path] = '<script type="text/javascript"'. ($info['defer'] ? ' defer="defer"' : '') .' src="'. base_path() . $path . $query_string ."\"></script>\n";
        }
        break;
    }
  }

  unset($popup_js['core']['misc/jquery.js']);
  unset($popup_js['core']['misc/drupal.js']);

  if (module_exists('jquery_update')) {
    foreach (jquery_update_get_replacements() as $type => $replacements) {
      foreach ($replacements as $find => $replace) {
        if (isset($popup_js[$type][$find])) {
          // Create a new entry for the replacement file, and unset the original one.
          $replace = JQUERY_UPDATE_REPLACE_PATH .'/'. $replace;
          //$popup_js[$type][$replace] = str_replace($find, $replace, $popup_js[$type][$find]);
          unset($popup_js[$type][$find]);
        }
      }
    }
  }

  return $popup_js;
}

/**
 * Get the added CSSS in a format that is readable by popups.js.
 */
function popups_get_css() {
  $css = drupal_add_css();
  $popup_css = array();

  $query_string = '?'. substr(variable_get('css_js_query_string', '0'), 0, 1);

  // Only process styles added to "all".
  $media = 'all';
  foreach ($css[$media] as $type => $files) {
    if ($type == 'module') {
      // Setup theme overrides for module styles.
      $theme_styles = array();
      foreach (array_keys($css[$media]['theme']) as $theme_style) {
        $theme_styles[] = basename($theme_style);
      }
    }
    foreach ($css[$media][$type] as $file => $preprocess) {
      // If the theme supplies its own style using the name of the module style, skip its inclusion.
      // This includes any RTL styles associated with its main LTR counterpart.
      if ($type == 'module' && in_array(str_replace('-rtl.css', '.css', basename($file)), $theme_styles)) {
        // Unset the file to prevent its inclusion when CSS aggregation is enabled.
        unset($css[$media][$type][$file]);
        continue;
      }
      // Only include the stylesheet if it exists.
      if (file_exists($file)) {
        // If a CSS file is not to be preprocessed and it's a module CSS file, it needs to *always* appear at the *top*,
        // regardless of whether preprocessing is on or off.
        if ($type == 'module') {
          $popup_css['module'][$file] = '<link type="text/css" rel="stylesheet" media="'. $media .'" href="'. base_path() . $file . $query_string .'" />'."\n";
        }
        // If a CSS file is not to be preprocessed and it's a theme CSS file, it needs to *always* appear at the *bottom*,
        // regardless of whether preprocessing is on or off.
        elseif ($type == 'theme') {
          $popup_css['theme'][$file] = '<link type="text/css" rel="stylesheet" media="'. $media .'" href="'. base_path() . $file . $query_string .'" />'."\n";
        }
        else {
          $popup_css['unknown'][$file] = '<link type="text/css" rel="stylesheet" media="'. $media .'" href="'. base_path() . $file . $query_string .'" />'."\n";
        }
      }
    }
  }

  return $popup_css;
}


/**
 * Define hook_popups().
 * Build the list of popup rules from all modules that implement hook_popups.
 *
 * Retrieves the list of popup rules from all modules that implement hook_popups.
 *
 * @param $reset
 *   (optional) If set to TRUE, forces the popup rule cache to reset.
 *
 */
function popups_get_popups($reset = FALSE) {
  static $popups = NULL;
  if (!isset($popups) || $reset) {
    // Get popups hash out of cache.
    if (!$reset && ($cache = cache_get('popups:popups')) && !empty($cache->data)) {
      $popups = $cache->data;
    }
    else {
      // Call all hook_popups and cache results.
      $popups = module_invoke_all('popups');

      // Invoke hook_popups_alter() to allow altering the default popups registry.
      drupal_alter('popups', $popups);

      // Save the popup registry in the cache.
      cache_set('popups:popups', $popups);
    }
  }
  return $popups;
}

/**
 * Attach the popup behavior to the page.
 *
 * The default behavoir of a popup is to open a form that will modify the original page.
 * The popup submits the form and reloads the original page with the resulting new content.
 * The popup then replaces the original page's content area with the new copy of that content area.
 *
 * @param array $rules: Array of rules to apply to the page or form, keyed by jQuery link selector.
 *   See README.txt for a listing of the options, and popups_admin.module for examples.
 */
function popups_add_popups($rules=NULL) {
  static $added = FALSE;
  $settings = array('popups' => array());

  if (is_array($rules)) {
    $settings['popups']['links'] = array();
    foreach ($rules as $popup_selector => $options) {
      if (is_array($options)) {
        $settings['popups']['links'][$popup_selector] = $options;
      }
      else {
        $settings['popups']['links'][$options] = array();
      }
    }
    if ($added) {
      drupal_add_js( $settings, 'setting' );
    }
  }
  if (!$added) {
    // Determing if we are showing the default theme or a custom theme.
    global $custom_theme;
    $theme = $custom_theme;
    if (!$theme) {
      $theme = variable_get('theme_default', 'none');
    }

    drupal_add_js('misc/jquery.form.js');
    drupal_add_css(drupal_get_path('module', 'popups') .'/popups.css');
    drupal_add_js(drupal_get_path('module', 'popups') .'/popups.js');

    // Allow skinning of the popup.
    $skin = variable_get('popups_skin', 'Basic');
    $skins = popups_skins();
    if (!isset($skins[$skin]['css'])) { // $skin == 'Unskinned'
      // Look in the current theme for popups-skin.js
      drupal_add_js(drupal_get_path('theme', $theme) . '/popups-skin.js');
    }
    else { // Get css and js from selected skin.
      drupal_add_css($skins[$skin]['css']);
      if (isset($skins[$skin]['js'])) {
        drupal_add_js($skins[$skin]['js']);
      }
    }

    $default_target_selector = variable_get('popups_'. $theme .'_content_selector', _popups_default_content_selector());

    $settings['popups']['originalPath'] = $_GET['q'];
    $settings['popups']['defaultTargetSelector'] = $default_target_selector;
    $settings['popups']['modulePath'] = drupal_get_path('module', 'popups');
    $settings['popups']['autoCloseFinalMessage'] = variable_get('popups_autoclose_final_message', 1);
    drupal_add_js( $settings, 'setting' );
    $added = TRUE;
  }
}

 /**
 * Retrieve all information from the popup skin registry.
 *
 * @param $reset
 *   (optional) If TRUE, will force the the skin registry to reset.
 * @see popups_popups_skins
 */
function popups_skins($reset = FALSE) {
  static $skins = array();
  if (empty($skins) || $reset) {
    if (!$reset && ($cache = cache_get('popups:skins')) && !empty($cache->data)) {
      $skins = $cache->data;
    }
    else {
      // Create the popup skin registry (hook_popups_skins) and cache it.
      $skins = module_invoke_all('popups_skins');
      ksort($skins);  // Sort them alphabetically
      cache_set('popups:skins', $skins, 'cache', CACHE_PERMANENT);
    }
  }
  return $skins;
}

/**
 * Implementation of hook_popups_skins.
 *
 * This hook allows other modules to create additional custom skins for the
 * popups module.
 *
 * @return array
 *   An array of key => value pairs suitable for inclusion as the #options in a
 *   select or radios form element. Each key must be the location of at least a
 *   css file for a popups skin. Optionally can have a js index as well. Each
 *   value should be the name of the skin.
 */
function popups_popups_skins() {
  $skins = array();
  $skins_directory = drupal_get_path('module', 'popups') .'/skins';
  $files = file_scan_directory($skins_directory, '\.css$');

  foreach ($files as $file) {
    $name = drupal_ucfirst($file->name);
    $skins[$name]['css'] = $file->filename;
    $js = substr_replace($file->filename, '.js', -4);
    if (file_exists($js)) {
      $skins[$name]['js'] = $js;
    }
  }
  return $skins;
}


/**
 * Returns the default jQuery content selector as a string.
 * Currently uses the selector for Garland.
 * Sometime in the future I will change this to '#content' or '#content-content'.
 */
function _popups_default_content_selector() {
  return 'div.left-corner > div.clear-block:last'; // Garland in Drupal 6.
}

// **************************************************************************
// ADMIN SETTINGS   *********************************************************
// **************************************************************************

/**
 * Form for the Popups Settings page.
 *
 */
function popups_admin_settings() {
  popups_add_popups();
  drupal_set_title("Popups Settings");
  $form = array();

  $form['popups_always_scan'] = array(
    '#type' => 'checkbox',
    '#title' => t('Scan all pages for popup links.'),
    '#default_value' => variable_get('popups_always_scan', 0),
  );
  $form['popups_autoclose_final_message'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically close final confirmation messages.'),
    '#default_value' => variable_get('popups_autoclose_final_message', 1),
  );

  // Retrieve all available skins, forcing the registry to refresh.
  $skins['Unskinned'] = array();
  $skins += popups_skins(TRUE);

  $skin_options = drupal_map_assoc(array_keys($skins));
  $form['popups_skins'] = array(
    '#type' => 'fieldset',
    '#title' => t('Skins'),
    '#description' => t('Choose a skin from the list. After you save, click !here to test it out.', array('!here' => l('here', 'user', array('attributes' => array('class' => 'popups'))))),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['popups_skins']['popups_skin'] = array(
    '#type' => 'radios',
    '#title' => t('Available skins'),
    '#default_value' => variable_get('popups_skin', 'Basic'),
    '#options' => $skin_options,
  );


  return system_settings_form($form);
}

/**
 * popups_form_alter adds this submit handler to the theme pages.
 * Set a per-theme jQuery content selector that gets passed into the js settings.
 *
 * @param $form
 * @param $form_state
 */
function popups_theme_settings_form_submit($form, &$form_state) {
  $theme = $form_state['values']['popups_theme'];
  $content_selector = $form_state['values']['popups_content_selector'];
  variable_set('popups_'. $theme .'_content_selector', $content_selector);
}

/**
 * Implementation of hook_preprocess_hook().
 *
 * When CSS or JS aggregation is enabled make a list of the CSS/JS incorporated
 * in it so we don't re-add it when loading the popup content.
 */
function popups_preprocess_page() {
  $base_path = base_path();

  if (variable_get('preprocess_css', 0)) {
    $css_on_page = array();
    foreach (popups_get_css() as $type => $files) {
      foreach ($files as $path => $html) {
        $css_on_page[$base_path . $path] = 1;
      }
    }
    $settings['popups']['originalCSS'] = $css_on_page;
  }

  if (variable_get('preprocess_js', 0)) {
    $js_on_page = array();
    $js = popups_get_js();
    // We don't care about settings or inline css.
    unset($js['inline'], $js['setting']);
    foreach ($js as $type => $files) {
      foreach ($files as $path => $html) {
        $js_on_page[$base_path . $path] = 1;
      }
    }
    $settings['popups']['originalJS'] = $js_on_page;
  }

  if (isset($settings)) {
    drupal_add_js($settings, 'setting');
  }
}
