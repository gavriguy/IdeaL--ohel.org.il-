<?php
// $Id: acquia_search.module 5289 2010-08-12 04:42:20Z buildbot $

/**
 * @file
 *   Integration between Acquia Drupal and Acquia's hosted solr search service.
 */

define('ACQUIA_SEARCH_VERSION', "6.x-1.5288");

/**
 * Implementation of hook_enable().
 */
function acquia_search_enable() {
  if (acquia_agent_subscription_is_active()) {
    _acquia_search_set_variables();
    // Send a heartbeat so the Acquia Network knows the module is enabled.
    acquia_agent_check_subscription();
  }
}

/**
 * Helper function - set apachesolr variables to Acquia values..
 */
function _acquia_search_set_variables() {
  variable_set('apachesolr_host', variable_get('acquia_search_host', 'search.acquia.com'));
  variable_set('apachesolr_port', variable_get('acquia_search_port', '80'));
  variable_set('apachesolr_path', variable_get('acquia_search_path', '/solr/'. acquia_agent_settings('acquia_identifier')));
  variable_set('apachesolr_service_class', array('acquia_search', 'Acquia_Search_Service.php', 'Acquia_Search_Service'));
  if (!variable_get('apachesolr_failure', FALSE)) {
    variable_set('apachesolr_failure', 'show_drupal_results');
  }
  variable_set('apachesolr_search_make_default', 1);
}

/**
 * Implementation of hook_disable().
 */
function acquia_search_disable() {
  acquia_search_delete_variables();
}

/**
 * Helper function to clear variables we may have set.
 */
function acquia_search_delete_variables() {
  variable_del('apachesolr_host');
  variable_del('apachesolr_port');
  variable_del('apachesolr_path');
  variable_del('apachesolr_service_class');
  variable_del('apachesolr_search_make_default');
}

/**
 * Implementation of hook_menu_alter().
 */
function acquia_search_menu_alter(&$menu) {
  if (isset($menu['admin/settings/apachesolr'])) {
    $menu['admin/settings/apachesolr']['title'] = 'Acquia Search';
  }
}

/**
 * Implementation of hook_form_[form_id]_alter().
 */
function acquia_search_form_apachesolr_delete_index_form_alter(&$form, $form_state) {
  $form['markup']['#value'] = t('Acquia Search index controls');
}

/**
 * Implementation of hook_form_[form_id]_alter().
 */
function acquia_search_form_apachesolr_settings_alter(&$form, $form_state) {
  // Don't alter the form if there is no subscription.
  if (acquia_agent_subscription_is_active()) {
    $form['apachesolr_host'] = array(
      '#type' => 'item',
      '#title' => t("Search is being provided by the Acquia Search network service"),
      '#value' => variable_get('apachesolr_host', 'localhost'),
    );
    $form['apachesolr_port']['#type'] = 'value';
    $form['apachesolr_path']['#type'] = 'value';
    $form['apachesolr_failure']['#title'] = t("If your site cannot connect to the Acquia Search network service");
    $form['#submit'][] = 'acquia_search_settings_submit';
    $form['advanced']['acquia_search_edismax_default'] = array(
      '#type' => 'radios',
      '#title' => t('Allow advanced syntax for all searches'),
      '#default_value' => variable_get('acquia_search_edismax_default', 0),
      '#options' => array(0 => t('Disabled'), 1 => t('Enabled')),
      '#description' => t('If enabled, all Acquia Search keyword searches may use advanced <a href="@url">Lucene syntax</a> such as wildcard searches, fuzzy searches, proximity searches, boolean operators and more via the Extended Dismax parser.', array('@url' => 'http://lucene.apache.org/java/2_9_1/queryparsersyntax.html')),
      '#weight' => 10,
    );
  }
}

/**
 * Implementation of hook_form_[form_id]_alter().
 */
function acquia_search_form_acquia_agent_settings_form_alter(&$form, $form_state) {
  $form['buttons']['submit']['#submit'][] = 'acquia_search_settings_submit';
  $form['buttons']['delete']['#submit'][] = 'acquia_search_settings_submit';
}

/**
 * Added submit function for acquia_agent_settings and apachesolr_settings forms.
 */
function acquia_search_settings_submit($form, &$form_state) {
  if (acquia_agent_subscription_is_active()) {
    _acquia_search_set_variables();
  }
  else {
    acquia_search_delete_variables();
  }
}

/**
 * Process a block search form submission.
 */
function acquia_search_search_box_form_submit($form, &$form_state) {
  $form_id = $form['form_id']['#value'];
  $keys = $form_state['values'][$form_id];
  // Handle Apache clean URL quirks.
  if (variable_get('clean_url', '0')) {
    $keys = str_replace('+', '%2B', $keys);
  }
  $form_state['redirect'] = 'search/apachesolr_search/'. trim($keys);
}

/**
 * Implementation of hook_apachesolr_modify_query().
 *
 * Possibly alters the query type ('qt') param to edismax.
 */
function acquia_search_apachesolr_modify_query($query, &$params, $caller) {
  // @todo - does it make sense to check $caller too?
  if (isset($params['qt'])) {
    // This is a 'mlt' query or something else custom.
    return;
  }
  // Set the qt to edismax if we have keywords, and we always use it, or are
  // using a wildcard (* or ?).
  $keys = $query->get_query_basic();
  if ($keys && (($wildcard = preg_match('/\S+[*?]/', $keys)) || variable_get('acquia_search_edismax_default', 0))) {
    $params['qt'] = 'edismax';
    if ($wildcard) {
      $keys = preg_replace_callback('/(\S+[*?]\S*)/', '_acquia_search_lower', $keys);
      $query->set_keys($keys);
    }
  }
}

/**
 * Convert to lower-case any keywords containing a wildcard.
 */
function _acquia_search_lower($matches) {
  return drupal_strtolower($matches[1]);
}

/**
 * Modify a solr base url and construct a hmac authenticator cookie.
 *
 * @param $url
 *  The solr url beng requested - passed by reference and may be altered.
 * @param $string
 *  A string - the data to be authenticated, or empty to just use the path
 *  and query from the url to build the authenticator.
 * @param $derived_key
 *  Optional string to supply the derived key.
 *
 * @return
 *  An array containing the string to be added as the content of the
 *  Cookie header to the request and the nonce.
 */
function acquia_search_auth_cookie(&$url, $string = '', $derived_key = NULL) {
  $uri = parse_url($url);

  // Add a scheme - should always be https if available.
  if (in_array('ssl', stream_get_transports(), TRUE) && !defined('ACQUIA_DEVELOPMENT_NOSSL')) {
    $scheme = 'https://';
    $port = '';
  }
  else {
    $scheme = 'http://';
    $port = (isset($uri['port']) && $uri['port'] != 80) ? ':'. $uri['port'] : '';
  }
  $path = isset($uri['path']) ? $uri['path'] : '/';
  $query = isset($uri['query']) ? '?'. $uri['query'] : '';
  $url = $scheme . $uri['host'] . $port . $path . $query;

  $nonce = md5(acquia_agent_random_bytes(55));

  if ($string) {
    $auth_header = acquia_search_authenticator($string, $nonce, $derived_key);
  }
  else {
    $auth_header = acquia_search_authenticator($path . $query, $nonce, $derived_key);
  }
  return array($auth_header, $nonce);
}

/**
 * Derive a key for the solr hmac using the information shared with acquia.com.
 */
function _acquia_search_derived_key() {
  static $derived_key;
  if (!isset($derived_key)) {
    $key = acquia_agent_settings('acquia_key');
    $subscription = acquia_agent_settings('acquia_subscription_data');
    $identifier = acquia_agent_settings('acquia_identifier');
    // We use a salt from acquia.com in key derivation since this is a shared
    // value that we could change on the AN side if needed to force any
    // or all clients to use a new derived key.  We also use a string
    // ('solr') specific to the service, since we want each service using a
    // derived key to have a separate one.
    if (empty($subscription['active']) || empty($key) || empty($identifier)) {
      // Expired or invalid subscription - don't continue.
      $derived_key = '';
    }
    else {
      $salt = isset($subscription['derived_key_salt']) ? $subscription['derived_key_salt'] : '';
      $derivation_string = $identifier . 'solr' . $salt;
      $derived_key = _acquia_search_hmac($key, str_pad($derivation_string, 80, $derivation_string));
    }
  }
  return $derived_key;
}

/**
 * Creates an authenticator based on a data string and HMAC-SHA1.
 */
function acquia_search_authenticator($string, $nonce, $derived_key = NULL) {
  if (empty($derived_key)) {
    $derived_key = _acquia_search_derived_key();
  }
  if (empty($derived_key)) {
    // Expired or invalid subscription - don't continue.
    return '';
  }
  else {
    $time = time();
    return 'acquia_solr_time='. $time .'; acquia_solr_nonce='. $nonce .'; acquia_solr_hmac='. _acquia_search_hmac($derived_key, $time . $nonce . $string) .';';
  }
}

/**
 * Validate the authenticity of returned data using a nonce and HMAC-SHA1.
 *
 * @return
 *  TRUE or FALSE.
 */
function acquia_search_valid_response($hmac, $nonce, $string, $derived_key = NULL) {
  if (empty($derived_key)) {
    $derived_key = _acquia_search_derived_key();
  }
  return $hmac == _acquia_search_hmac($derived_key, $nonce . $string);
}

/**
 * Look in the headers and get the hmac_digest out
 * @return string hmac_digest
 *
 */
function acquia_search_extract_hmac($http_response_header) {
  $reg = array();
  if (is_array($http_response_header)) {
    foreach ($http_response_header as $header) {
      if (preg_match("/Pragma:.*hmac_digest=(.+);/i", $header, $reg)) {
        return trim($reg[1]);
      }
    }
  }
  return '';
}

/**
 * Calculates a HMAC-SHA1 of a data string.
 *
 * See RFC2104 (http://www.ietf.org/rfc/rfc2104.txt). Note, the result of this
 * must be identical to using hash_hmac('sha1', $string, $key);  We don't use
 * that function since PHP can be missing it if it was compiled with the
 * --disable-hash switch. However, the hash extension is enabled by default
 * as of PHP 5.1.2, so we should consider requiring it and using the built-in
 * function since it is a little faster (~1.5x).
 */
function _acquia_search_hmac($key, $string) {
  return sha1((str_pad($key, 64, chr(0x00)) ^ (str_repeat(chr(0x5c), 64))) . pack("H*", sha1((str_pad($key, 64, chr(0x00)) ^ (str_repeat(chr(0x36), 64))) . $string)));
}

/**
 * Implementation of hook_update_status_alter().
 *
 * This function disables the reporting of apachesolr update notifications
 * if the acquia_search module is enabled.  When the administrator updates
 * the acquia_search module, the apachesolr module is also updated, so there
 * is no need for both.
 *
 * @param $projects
 *   Reference to an array of information about available updates to each
 *   project installed on the system.
 *
 * @see update_calculate_project_data()
 */
function acquia_search_update_status_alter(&$projects) {
  // If we are running Acquia Drupal, acquia_agent handles this.
  if (!acquia_agent_has_update_service() && isset($projects['apachesolr'])) {
    $projects['acquia_search']['includes']['apachesolr'] = $projects['apachesolr']['title'];
    unset($projects['apachesolr']);
  }
}
