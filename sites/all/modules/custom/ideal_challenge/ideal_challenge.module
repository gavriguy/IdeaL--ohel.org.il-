<?php 

define('CATEGORIES_VID', 2);

/**
 *  Implementation of hook_init().
 */
function ideal_challenge_init() {

}

/**
 * Implementation of hook_block().
 */
function ideal_challenge_block($op = 'list', $delta = 0) {
   if ($op == 'list') {

    $blocks['challenge_add_idea'] = array(
    'info' => t('ideal challenge add idea'),
    );
    
    return $blocks;
  }
  elseif ($op == 'view') {
    switch ($delta) {

      case 'challenge_add_idea':
        $block = array(
        'subject' => t(''),
        'content' => ideal_challenge_add_idea(),
        );
        break;
    }
    return $block;
  }
}

/**
 * Generate a block containing a node entry form.
 */
function ideal_challenge_add_idea() {
  //if (node_access('create', 'idea')) {
    module_load_include('inc', 'node', 'node.pages');
    $title = drupal_get_title();
    $form = node_add('idea');
    drupal_set_title($title);

    return theme('ideal_challenge_add_idea', $form);
  //}
}

  /**
 * Implementation of hook_theme()
 */
function ideal_challenge_theme($existing, $type, $theme, $path) {
  return array(
    'ideal_challenge_add_idea' => array(
      'arguments' => array('titles' => NULL),
    ),
  );
}

/**
 * Theme function for the add idea block
 * @param $form 
 * @return HTML string
 */
function theme_ideal_challenge_add_idea($form) { 
  $challenge_nid = variable_get('default_challenge', NULL);
  if ($challenge_nid) {
    $challenge_node = node_load($challenge_nid);
    $challenge_db_info = content_database_info(content_fields('field_challenge', 'idea'));
    $challenge_field = $challenge_db_info['columns']['nid']['column'];
    $challenge_table = $challenge_db_info['table'];
    $count = db_result(
      db_query(
        "SELECT COUNT(*) 
        FROM $challenge_table 
        WHERE $challenge_field = %d",
        $challenge_nid 
      )
    );
  }
  $is_front = drupal_is_front_page();
  if ($is_front) {
    $output .= '<div id="challenge_add_idea">';
    $output .= '<h2>' . t('One challenge a month')/*$challenge_node->title*/. '</h2>';    
    $output .= l(t('To all previous challenges'), 'challenges', array('attributes' => array('class' => 'view-all')));
    $output .= '<div class="challenge-image">' . theme('imagecache', '140x140_thumb', $challenge_node->field_challenge_image[0]['filepath'], 'Challenge image', 'Challenge image') . '</div>';
    $output .= '<div class="challenge_content">';
    $output .= '<h3>' . $challenge_node->title . '</h3><p>' . $challenge_node->body . '</p>';
    $output .= l(t('To all ideas so far (!count)', array('!count' => $count)), 'node/' . $challenge_nid, array('attributes' => array('class' => 'all_challenges'))) . '</div>';
    if ($form) {
      $output .= '<div class="form-wrapper">' . $form . '</div>';
    }
    else {
      $output .= '<div class="form-wrapper"><div class="anonymous-form"><div class="anonymous-form-inner">';
      $output .= t('to add your idea, vote or comment you must be a registered user in @sitename, Please !login or !register', array('@sitename' => variable_get('site_name', "Ideal"), '!login' => l(t('Login'), 'user/login'), '!register' => l(t('Register'), 'user/register')));
      $output .= '</div></div></div>';
    }
    $output .= '</div>';
    //$output .= dpm($challenge_node);
  }
  else {
    $output .= '<div id="challenge_add_idea">';
    $output .= '<div class="form-wrapper">' . $form . '</div>';
    $output .= '</div>';    
  }
  return $output;
}

/**
 * Implementation of hook_form_alter().
 */
function ideal_challenge_form_alter(&$form, $form_state, $form_id) {
  global $user;
  $is_front = drupal_is_front_page();
  switch ($form_id) {
    case 'idea_node_form':
      if (!user_access('admin ideas', $user)) {
      //if (!(in_array('administrator', array_values($user->roles))) && $user->uid != 1) {
        $form['field_challenge']['#access'] = FALSE;
      }
      if (isset($_GET['q']) && $_GET['q'] != 'node/add/idea' && arg(2) != 'edit') {
        $form['field_in_action']['#access']                   = FALSE;
        $form['path']['#access']                              = FALSE;
        $form['comment_settings']['#access']                  = FALSE;
        $form['menu']['#access']                              = FALSE;
        $form['revision_information']['revision']['#access']  = FALSE;
        $form['author']['#access']                            = FALSE;
        $form['options']['#access']                           = FALSE;
        $form['body_field']['teaser_include']['#access']      = FALSE;
        $form['body_field']['format']['#access']              = FALSE;
        $form['taxonomy']['#access']                          = FALSE;
        $form['taxonomy'][CATEGORIES_VID]['#required']        = FALSE;
        $form['flag']['#access']                              = FALSE;
        $form['revision_information']['#access']              = FALSE;
        $form['buttons']['preview']['#access']                = FALSE;
        $form['field_challenge']['#access']                   = FALSE;
        $form['field_project_ref']['#access']                 = FALSE;              
        $form['title']['#title']                              = t('Add idea');       
        $form['body_field']['body']['#title']                 = '';
                
        $form['#submit'][] = 'ideal_challenge_idea_add_type_form_submit';
      }
      break;
  }
}

/**
 * Additional submit handler for the node add form.
 */
function ideal_challenge_idea_add_type_form_submit($form, &$form_state) {
  $challenge = variable_get('default_challenge', NULL);
  $form_state['values']['field_challenge']['0']['nid'] = $challenge;
  $node = node_load($challenge);
  foreach ($node->taxonomy as $term) {
    if ($term->vid == CATEGORIES_VID) {
      $form_state['values']['taxonomy'][CATEGORIES_VID][$term->tid] = $term->tid;
    }
  }
}

/**
 *  Implementation of hook_menu().
 */
function ideal_challenge_menu() {
  $items = array();
  $items['admin/content/ideal-challenge'] = array(
    'title'             => 'Default Challenge',
    'access arguments'  => array('access content'),
    'page callback'     => 'ideal_challenge_page',
    'type'              => MENU_NORMAL_ITEM,
  );
  return $items;
}

function ideal_challenge_page() {
  return drupal_get_form('ideal_challenge_default_challenge_form');
}

function ideal_challenge_default_challenge_form() {
  $options = array();

  $result = db_query("SELECT nid, title FROM {node} WHERE type = 'challenge'");

  while ($fetch = db_fetch_array($result)) {
    $options[$fetch['nid']] = $fetch['title'];
  }

  $form['default_challenge'] = array(
    '#type'             => 'select',
    '#title'            => t('Default Challenge'),
    '#options'          => $options,
    '#default_value'     => variable_get('default_challenge', NULL),
  );

  $form['submit'] = array(
    '#type'            => 'submit',
    '#value'           => t('Submit'),
  );

  return $form;
}

/**
 * @param $form
 * @param $form_state
 * @return unknown_type
 */
function ideal_challenge_default_challenge_form_submit($form, &$form_state) {
  $default_challenge = $form_state['values']['default_challenge'];
  variable_set('default_challenge', $default_challenge);
}

function _get_challenge_count($nid) {
  $db_field = $db_info['columns']['value']['column'];
  $db_table = $db_info['table'];
  return db_result(db_query("SELECT COUNT(*) FROM $db_table WHERE $db_field = %d" ,$nid));
}
