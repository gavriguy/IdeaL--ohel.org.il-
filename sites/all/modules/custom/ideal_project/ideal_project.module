<?php 

define('POPULAR_FLAG', 19);
define('WORTH_CHECKING_FLAG', 13);

/**
 *  Implementation of hook_init().
 */
function ideal_project_init() {

}
 
/**
 * Implementation of hook_nodeapi().
 *
 * @param &$node The node the action is being performed on.
 * @param $op What kind of action is being performed. Possible values: alter, delete, delete revision, insert, load, prepare, prepare translation, print, rss item, search result, presave, update, update index, validate, view
 * @param $a3
 * @param $a4
 */
function ideal_project_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'presave') {
    if ($node->type == 'project'){
      $ideas_ref_db_info = content_database_info(content_fields('field_ideas_ref', 'project'));
      $in_action_db_info = content_database_info(content_fields('field_in_action', 'idea'));
      
      $ideas_ref_field = $ideas_ref_db_info['columns']['nid']['column'];
      $ideas_ref_table = $ideas_ref_db_info['table'];
      
      $in_action_field = $in_action_db_info['columns']['value']['column'];
      $in_action_table = $in_action_db_info['table'];
      
      $self_in_action = $node->field_in_action['0']['value'];
      
      db_query(
        "UPDATE {$in_action_table}
        SET {$in_action_field} = '$self_in_action'
        WHERE nid IN (
          SELECT $ideas_ref_field        
          FROM $ideas_ref_table  
          WHERE nid = $node->nid
        )"
      );
    } 
  }
}


/**
 * Implementation of hook_comment().
 * Create comment for any idea under the project when project is commented.
 * @param unknown_type $a1
 * @param unknown_type $op
 */
function ideal_project_comment(&$a1, $op) {
  global $user;  
  $nid = $a1->nid;
  $node_type = db_result(db_query("SELECT type FROM {node} WHERE nid = %d", $nid));
  if ($op == 'insert') {
    if ($node_type == 'project') {
      $ideas_ref_db_info = content_database_info(content_fields('field_ideas_ref', 'project'));          
      $ideas_ref_field = $ideas_ref_db_info['columns']['nid']['column'];
      $ideas_ref_table = $ideas_ref_db_info['table'];
      $result = db_query("SELECT $ideas_ref_field FROM $ideas_ref_table WHERE nid = %d", $nid);
      while ($fetch = db_fetch_array($result)) {
        $idea_comment_fields = array();
        $idea_comment_fields['values']['author'] = $user->name;
        $idea_comment_fields['values']['subject'] = $a1->subject;
        $idea_comment_fields['values']['comment'] = $a1->comment;
        $idea_comment_fields['values']['op'] = t('Save');
        $idea_comment_fields['values']['nid'] = $fetch['field_ideas_ref_nid'];
        comment_form_submit("comment_form", $idea_comment_fields);
      }
    }
  }
}

function ideal_project_flag_popular($nid) {
  if (ideal_project_is_popular($nid)) {
    $flag_popular = flag_get_flag('popular');
    $flag_popular->flag('flag', $nid);
    
    $flag_worth_checking = flag_get_flag('worth_checking');
    $flag_worth_checking->flag('flag', $nid);
  }
  else {
    $flag_popular = flag_get_flag('popular');
    $flag_popular->flag('unflag', $nid);
  }
}

/**
 * Check if the SUM of comments and votes on all ideas connected to project gets to popular.  
 * @param $nid
 * @return boolean
 */
function ideal_project_is_popular($nid) {
  $ideas_ref_db_info = content_database_info(content_fields('field_ideas_ref', 'project'));
  $ideas_ref_field = $ideas_ref_db_info['columns']['nid']['column'];
  $ideas_ref_table = $ideas_ref_db_info['table'];
  
  $comment_value = variable_get('idea_popular_comment_points', 0);
  $vote_value = variable_get('pidea_popular_vote_points', 0);
  $total_value = variable_get('idea_popular_total', 0);
  $period = variable_get('idea_popular_period', 0);
  $time_ago = time() - $period;
  
  $comments = db_result(
  db_query(
  	"SELECT COUNT(*) 
    FROM {comments} c 
    INNER JOIN $ideas_ref_table i 
    ON i.$ideas_ref_field = c.nid 
    WHERE i.nid = $nid 
    AND timestamp >= %d", 
    $time_ago)
  );
  
  $votes = db_result(
  db_query(
    "SELECT COUNT(*) 
    FROM {votingapi_vote} v 
    INNER JOIN $ideas_ref_table i 
    ON i.$ideas_ref_field = v.content_id 
    WHERE i.nid = $nid 
    AND timestamp >= %d", 
    $time_ago)
  );
  
  $comments = $comments * $comment_value;
  $votes = $votes * $vote_value;
  
  return $comments + $votes >= $total_value ? TRUE : FALSE;
}

function ideal_project_cron() {
 if (!variable_get('ideal_last_cron', time())) {
    variable_set('ideal_last_cron', time());
  }
  if (variable_get('ideal_last_cron', time()) <= time() - (60*60*24))  {
    $result = db_query("SELECT content_id FROM {flag_content} WHERE fid = %d", POPULAR_FLAG);
    while ($fetch = db_fetch_array($result)) {
      ideal_project_flag_popular($fetch['content_id']);
      ideal_add_project_when_idea_is_worth_checking();
    }
  } 
}

function _ideal_add_project_when_idea_is_worth_checking() {
  $result = db_query("SELECT content_id FROM {flag_content} WHERE fid = %d", WORTH_CHECKING_FLAG);
   while ($fetch = db_fetch_array($result)) {
      $nid = ($fetch['content_id']);
      $node = noad_load($nid);
      if (!$node->field_project[0]['items'][0]['nid']) {
        $newnode = new stdClass();
        $newnode->title = $node->title;
        $newnode->body = $node->body;
        $newnode->uid = 1;
        $newnode->type = 'project';
        $newnode->taxonomy = $node->taxonomy;
        node_save($newnode);
    }
    $flag_worth_checking = flag_get_flag('worth_checking');
    $flag_worth_checking->flag('flag', $newnode->nid);
  }
}