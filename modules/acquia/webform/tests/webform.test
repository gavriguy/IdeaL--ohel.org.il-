<?php
// $Id$

/**
 * @file
 * Webform module tests.
 */

class WebformTestCase extends DrupalWebTestCase {
  private $_webform_node;
  private $_webform_components;
  public $webform_users;

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('Webform'),
      'description' => t('Parent test suite used to setup Webform tests.'),
      'group' => t('Webform'),
    );
  }

  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Enable Webform.
    parent::setUp('webform', 'profile');

    // Create a profile field to test %profile tokens.
    db_query("INSERT INTO {profile_fields} (title, name, explanation, category, type, weight, required, register, visibility, autocomplete, options, page) VALUES ('%s', '%s', '%s', '%s', '%s', %d, %d, %d, %d, %d, '%s', '%s')", 'Gender', 'profile_gender', '', 'Profile', 'textfield', 0, 0, 0, 2, 0, '', '');

    // Create a normal user that can view their own submissions.
    $permissions['userAccess'] = array(
      'access content',
      'access own webform submissions',
    );

    // Create a normal user than can edit their own submissions.
    $permissions['userEdit'] = array(
      'access content',
      'edit own webform submissions',
    );

    // Create a webform editor to test creating and editing own content.
    $permissions['editor'] = array(
      'access content',
      'create webforms',
      'edit own webforms',
      'access webform results',
    );

    // Create a webform admin that will do all node creation.
    $permissions['admin'] = array(
      'access content',
      'administer nodes',
      'create webforms',
      'edit webforms',
      'edit webform submissions',
      'access webform results',
      'clear webform results',
    );

    foreach ($permissions as $user_key => $role_permissions) {
      $this->webform_users[$user_key] = $this->drupalCreateUser($role_permissions);
      $profile = array('profile_gender' => 'Female');
      $this->webform_users[$user_key]->profile_gender = 'Female';
      profile_save_profile($profile, $this->webform_users[$user_key], 'Profile');
    }
  }

  /**
   * Implemenation of tearDown().
   */
  function tearDown() {
    // Delete the webform admin and any created nodes.
    foreach ($this->webform_users as $account) {
      $uid = $account->uid;
      $result = db_query('SELECT nid FROM {node} WHERE uid = %d', $uid);
      while ($node = db_fetch_array($result)) {
        node_delete($node['nid']);
      }
      user_delete(array(), $uid);
    }

    parent::tearDown();
  }

  /**
   *
   */
  function webformReset() {
    $this->_webform_node = NULL;
    $this->_webform_components = NULL;
  }

  /**
   * Provide a list of components to test throughout the suite.
   *
   * Each component provides:
   *   - A default configuration for the component.
   *   - Values to try setting via POST
   *   - Values that should match the database storage when set via POST
   *   - Values that should match the database storage when using the default values.
   *
   * @return array
   *   An array of each component settings.
   */
  function testWebformComponents() {
    if (isset($this->_webform_components)) {
      return $this->_webform_components;
    }

    // Time components use a lot of conversion factors, generate a list of times
    // equal to 10:30pm (the default value used as a sample).
    $timestamp = strtotime('10:30pm');
    $site_hour12 = gmdate('g', $timestamp + (int)variable_get('date_default_timezone', 0));
    $site_hour24 = gmdate('G', $timestamp + (int)variable_get('date_default_timezone', 0));
    $site_minute = gmdate('i', $timestamp + (int)variable_get('date_default_timezone', 0));
    $site_ampm = gmdate('a', $timestamp + (int)variable_get('date_default_timezone', 0));

    $this->_webform_components = array(
      // Test date components.
      'date' => array(
        'component' => array(
          'form_key' => 'date',
          'name' => 'Date',
          'type' => 'date',
          'value' => '19 Nov 1978',
          'extra' => array(
            'timezone' => 'site',
            'year_start' => '1950',
            'year_end' => '2020',
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '-15',
          'page_num' => 1,
        ),
        'sample values' => array('day' => '30', 'month' => '9', 'year' => '1982'),
        'database values' => array('9', '30', '1982'),
        'database default values' => array('11', '19', '1978'),
      ),

      // Test grid components.
      'grid' => array(
        'component' => array(
          'form_key' => 'grid',
          'name' => 'Grid',
          'type' => 'grid',
          'value' => '',
          'extra' => array(
            'questions' => "Ålphå\nıé†å\nÎé¬†å", // Left side
            'options' => "øne\ntwö\nǼBƇ\n€Euro", // Top
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '2',
          'weight' => '-19',
          'page_num' => 1,
        ),
        'sample values' => array('Ålphå' => 'øne', 'ıé†å' => 'twö', 'Îé¬†å' => 'ǼBƇ'),
        'database values' => array('øne', 'twö', 'ǼBƇ'),
        'database default values' => array('', '', ''),
      ),
      'grid_keyed' => array(
        'component' => array(
          'form_key' => 'grid_keyed',
          'name' => 'Grid Keyed',
          'type' => 'grid',
          'value' => '',
          'extra' => array(
            'questions' => "What's your option?\nAgåin?\nOne more time!", // Left side.
            'options' => "one|Option one\ntwo|Option 2\nthree| Three is me", // Top
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '-15',
          'page_num' => 1,
        ),
        'sample values' => array(
          'Whats your option?' => 'one', // Quotes removed from values.
          'Agåin?' => 'two',
          'One more time!' => 'three',
        ),
        'database values' => array('one', 'two', 'three'),
        'database default values' => array('', '', ''),
      ),
      'grid_mixed' => array(
        'component' => array(
          'form_key' => 'grid_mixed',
          'name' => 'Grid Mixed',
          'type' => 'grid',
          'value' => '',
          'extra' => array(
            'questions' => "Ålphå\nıé†å\nÎé¬†å", // Left side
            'options' => "øne\ntwö\nǼBƇ\n€Euro", // Top
            'optrand' => 1,
            'qrand' => 1,
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '2',
          'weight' => '-19',
          'page_num' => 1,
        ),
        'sample values' => array('Ålphå' => 'øne', 'ıé†å' => 'twö', 'Îé¬†å' => 'ǼBƇ'),
        'database values' => array('øne', 'twö', 'ǼBƇ'),
        'database default values' => array('', '', ''),
      ),
      'grid_keyed_mixed' => array(
        'component' => array(
          'form_key' => 'grid_keyed_mixed',
          'name' => 'Grid Keyed',
          'type' => 'grid',
          'value' => '',
          'extra' => array(
            'questions' => "What's your option?\nAgåin?\nOne more time!", // Left side.
            'options' => "one|Option one\ntwo|Option 2\nthree| Three is me", // Top
            'optrand' => 1,
            'qrand' => 1,
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '-15',
          'page_num' => 1,
        ),
        'sample values' => array(
          'Whats your option?' => 'one', // Quotes removed from values.
          'Agåin?' => 'two',
          'One more time!' => 'three',
        ),
        'database values' => array('one', 'two', 'three'),
        'database default values' => array('', '', ''),
      ),

      // Test select components.
      'checkboxes' => array(
        'component' => array(
          'form_key' => 'checkboxes',
          'name' => 'Checkboxes',
          'type' => 'select',
          'value' => 'two',
          'extra' => array(
            'items' => "one\ntwo\nthree",
            'multiple' => 'Y',
            'email' => 0,
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '-15',
          'page_num' => 1,
        ),
        'sample values' => array('one' => TRUE, 'two' => FALSE, 'three' => TRUE),
        'database values' => array('one', 'three'),
        'database default values' => array('two'),
      ),
      'radios' => array(
        'component' => array(
          'form_key' => 'radios',
          'name' => 'Radios',
          'type' => 'select',
          'value' => 'two',
          'extra' => array(
            'items' => "one\ntwo\nthree",
            'email' => 0,
          ),
          'mandatory' => '1',
          'email' => '1',
          'pid' => '0',
          'weight' => '-9',
          'page_num' => 1,
        ),
        'sample values' => 'one',
        'database values' => array('one'),
        'database default values' => array('two'),
      ),
      'radios_zero' => array(
        'component' => array(
          'form_key' => 'radios_zero',
          'name' => 'Radios',
          'type' => 'select',
          'value' => '0',
          'extra' => array(
            'items' => "0|zero\n1|one\n2|two",
            'email' => 0,
          ),
          'mandatory' => '1',
          'email' => '1',
          'pid' => '0',
          'weight' => '-9',
          'page_num' => 1,
        ),
        'sample values' => '0',
        'database values' => array('0'),
        'database default values' => array('0'),
      ),
      'select' => array(
        'component' => array(
          'form_key' => 'select',
          'name' => 'Select',
          'type' => 'select',
          'value' => 'one',
          'extra' => array(
            'description' => '<p>Description here</p>',
            'items' => "one\ntwo\nthree\nfour\nfive\nsix",
            'aslist' => 'Y',
            'email' => 0,
          ),
          'mandatory' => '1',
          'email' => '1',
          'pid' => '0',
          'weight' => '-15',
          'page_num' => 1,
        ),
        'sample values' => 'two',
        'database values' => array('two'),
        'database default values' => array('one'),
      ),
      'select_zero' => array(
        'component' => array(
          'form_key' => 'select_zero',
          'name' => 'Select',
          'type' => 'select',
          'value' => '0',
          'extra' => array(
            'description' => '<p>Tests saving zero as a value.</p>',
            'items' => "0|zero\n1|one\n2|two",
            'aslist' => 'Y',
            'email' => 0,
          ),
          'mandatory' => '1',
          'email' => '1',
          'pid' => '0',
          'weight' => '-15',
          'page_num' => 1,
        ),
        'sample values' => '0',
        'database values' => array('0'),
        'database default values' => array('0'),
      ),
      'select_optgroup' => array(
        'component' => array(
          'form_key' => 'select_optgroup',
          'name' => 'Select Optgroup',
          'type' => 'select',
          'value' => 'option 1-2',
          'extra' => array(
            'description' => '<p>Tests saving zero as a value.</p>',
            'items' => "<Group 1>\noption 1-1\noption 1-2\noption 1-3\n<Group 2>\noption 2-1\noption 2-2\noption 2-3",
            'aslist' => 'Y',
            'email' => 0,
          ),
          'mandatory' => '1',
          'email' => '1',
          'pid' => '0',
          'weight' => '-15',
          'page_num' => 1,
        ),
        'sample values' => 'option 2-2',
        'database values' => array('option 2-2'),
        'database default values' => array('option 1-2'),
      ),
      'select_email' => array(
        'component' => array(
          'form_key' => 'select_email',
          'name' => 'Select e-mails',
          'type' => 'select',
          'value' => 'nate@localhost',
          'extra' => array(
            'items' => "nate@localhost|one\nadmin@localhost|two",
            'email' => 3,
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '2',
          'weight' => '-17',
          'page_num' => 1,
        ),
        'sample values' => 'admin@localhost',
        'database values' => array('admin@localhost'),
        'database default values' => array('nate@localhost'),
      ),
      'select_multiple' => array(
        'component' => array(
          'form_key' => 'select_multiple',
          'name' => 'Select Multiple',
          'type' => 'select',
          'value' => 'one,two',
          'extra' => array(
            'items' => "one\ntwo\nthree",
            'multiple' => 'Y',
            'aslist' => 'Y',
            'email' => 0,
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '-10',
          'page_num' => 1,
        ),
        // TODO: I'd like to test a value, but SimpleTest can't set multiple values.
        'sample values' => NULL,
        'database values' => array('one', 'two'),
        'database default values' => array('one', 'two'),
      ),

      // Test date components.
      'date_textfield' => array(
        'component' => array(
          'form_key' => 'date_textfield',
          'name' => 'Date Textfield',
          'type' => 'date',
          'value' => 'Nov 19 1978',
          'extra' => array(
            'timezone' => 'site',
            'year_start' => '1900',
            'year_end' => '2050',
            'year_textfield' => 1,
          ),
          'mandatory' => '1',
          'email' => '1',
          'pid' => '0',
          'weight' => '-7',
          'page_num' => 1,
        ),
        'sample values' => array('day' => '30', 'month' => '9', 'year' => '1982'),
        'database values' => array('9', '30', '1982'),
        'database default values' => array('11', '19', '1978'),
      ),

      // Test email components.
      'email' => array(
        'component' => array(
          'form_key' => 'email',
          'name' => 'E-mail',
          'type' => 'email',
          'value' => '%useremail',
          'extra' => array(
            'email' => 19,
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '-5',
          'page_num' => 1,
        ),
        'sample values' => 'admin@localhost',
        'database values' => array('admin@localhost'),
        'database default values' => array($this->webform_users['admin']->mail),
      ),

      // Test hidden components.
      'hidden' => array(
        'component' => array(
          'form_key' => 'hidden',
          'name' => 'Hidden',
          'type' => 'hidden',
          'value' => 'default hidden value',
          'extra' => array(
            'email' => 0,
          ),
          'mandatory' => '1',
          'email' => '1',
          'pid' => '0',
          'weight' => '-4',
          'page_num' => 1,
        ),
        'sample values' => NULL,
        'database values' => array('default hidden value'),
        'database default values' => array('default hidden value'),
      ),

      // Test textarea components.
      'textarea' => array(
        'component' => array(
          'form_key' => 'textarea',
          'name' => 'Textarea',
          'type' => 'textarea',
          'value' => 'sample textarea default value',
          'extra' => array(),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '15',
          'page_num' => 1,
        ),
        'sample values' => 'sample textarea value',
        'database values' => array('sample textarea value'),
        'database default values' => array('sample textarea default value'),
      ),

      // Test textfield components.
      'textfield_disabled' => array(
        'component' => array(
          'form_key' => 'textfield_disabled',
          'name' => 'Textfield Disabled',
          'type' => 'textfield',
          'value' => '%get[foo]',
          'extra' => array(
            'disabled' => 1,
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '-15',
          'page_num' => 1,
        ),
        'sample values' => NULL,
        'database values' => array('bar'),
        'database default values' => array('bar'),
      ),
      'textfield_profile' => array(
        'component' => array(
          'form_key' => 'textfield_profile',
          'name' => 'Textfield Profile',
          'type' => 'textfield',
          'value' => '%profile[profile_gender]',
          'extra' => array(
            'width' => '20',
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '-6',
          'page_num' => 1,
        ),
        'sample values' => 'Female',
        'database values' => array('Female'),
        'database default values' => array($this->webform_users['admin']->profile_gender),
      ),

      // Test time components.
      'time' => array(
        'component' => array(
          'form_key' => 'time',
          'name' => 'Time',
          'type' => 'time',
          'value' => '10:30pm',
          'extra' => array(
            'timezone' => 'site',
            'hourformat' => '12-hour',
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '16',
          'page_num' => 1,
        ),
        'sample values' => array('hour' => '5', 'minute' => '00', 'ampm' => 'am'),
        'database values' => array('5', '00', 'am'),
        'database default values' => array($site_hour12, $site_minute, $site_ampm),
      ),
      'time_24h' => array(
        'component' => array(
          'form_key' => 'time_24h',
          'name' => 'Time 24H',
          'type' => 'time',
          'value' => '10:30pm',
          'extra' => array(
            'timezone' => 'site',
            'hourformat' => '24-hour',
          ),
          'mandatory' => '0',
          'email' => '1',
          'pid' => '0',
          'weight' => '17',
          'page_num' => 1,
        ),
        'sample values' => array('hour' => '5', 'minute' => '00'),
        'database values' => array('5', '00'),
        'database default values' => array($site_hour24, $site_minute),
      ),
    );

    return $this->_webform_components;
  }

  function testWebformForm() {
    if (isset($this->_webform_node)) {
      return $this->_webform_node;
    }

    $settings = array(
     'type' => 'webform',
     'language' => '',
     'uid' => '1',
     'status' => '1',
     'promote' => '1',
     'moderate' => '0',
     'sticky' => '0',
     'tnid' => '0',
     'translate' => '0',
     'title' => 'Test Webform',
     'body' => 'Donec placerat. Nullam nibh dolor, blandit sed, fermentum id, imperdiet sit amet, neque. Nam mollis ultrices justo. Sed tempor. Sed vitae tellus. Etiam sem arcu, eleifend sit amet, gravida eget, porta at, wisi. Nam non lacus vitae ipsum viverra pretium. Phasellus massa. Fusce magna sem, gravida in, feugiat ac, molestie eget, wisi. Fusce consectetuer luctus ipsum. Vestibulum nunc. Suspendisse dignissim adipiscing libero. Integer leo. Sed pharetra ligula a dui. Quisque ipsum nibh, ullamcorper eget, pulvinar sed, posuere vitae, nulla. Sed varius nibh ut lacus. Curabitur fringilla. Nunc est ipsum, pretium quis, dapibus sed, varius non, lectus. Proin a quam. Praesent lacinia, eros quis aliquam porttitor, urna lacus volutpat urna, ut fermentum neque mi egestas dolor.',
     'teaser' => 'Donec placerat. Nullam nibh dolor, blandit sed, fermentum id, imperdiet sit amet, neque. Nam mollis ultrices justo. Sed tempor. Sed vitae tellus. Etiam sem arcu, eleifend sit amet, gravida eget, porta at, wisi. Nam non lacus vitae ipsum viverra pretium. Phasellus massa. Fusce magna sem, gravida in, feugiat ac, molestie eget, wisi. Fusce consectetuer luctus ipsum. Vestibulum nunc. Suspendisse dignissim adipiscing libero. Integer leo. Sed pharetra ligula a dui. Quisque ipsum nibh, ullamcorper eget, pulvinar sed, posuere vitae, nulla. Sed varius nibh ut lacus. Curabitur fringilla.',
     'log' => '',
     'format' => '1',
     'webform' => array(
        'confirmation' => 'Thanks!',
        'teaser' => '0',
        'submit_text' => '',
        'submit_limit' => '-1',
        'submit_interval' => '-1',
        'email' => 'nate@localhost',
        'email_from_name' => 'default',
        'email_from_address' => 'default',
        'email_subject' => 'default',
        'additional_validate' => '',
        'additional_submit' => '',
        'roles' => array('1', '2'),
        'components' => array(),
        'additional_emails' => array(),
      ),
    );

    $cid = 0;
    foreach ($this->testWebformComponents() as $key => $component_info) {
      $cid++;
      $settings['webform']['components'][$cid] = $component_info['component'];
      $settings['webform']['components'][$cid]['cid'] = $cid;
      $settings['webform']['components'][$cid]['pid'] = 0;
    }

    $this->_webform_node = $this->drupalCreateNode($settings);

    return $this->_webform_node;
  }


  function testWebformPost() {
    $edit = array();
    foreach ($this->testWebformComponents() as $key => $component_info) {
      if (is_array($component_info['sample values'])) {
        foreach ($component_info['sample values'] as $subkey => $value) {
          $edit["submitted[$key][$subkey]"] = $value;
        }
      }
      elseif ($component_info['sample values'] != NULL) {
        $value = $component_info['sample values'];
        // Multiple selects have a funky extra empty bracket in the name.
        $extra = $key == 'select_multiple' ? '[]' : '';
        $edit["submitted[$key]$extra"] = $value;
      }
    }
    return $edit;
  }

  /**
   * Utility function to print out the current page being tested.
   */
  function webformPrintPage() {
    debug($this->drupalGetContent());
  }
}

